// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/01/2015 15:25:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cw3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cw3_vlg_sample_tst(
	bt3,
	sw0,
	sw1,
	sampler_tx
);
input  bt3;
input  sw0;
input  sw1;
output sampler_tx;

reg sample;
time current_time;
always @(bt3 or sw0 or sw1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cw3_vlg_check_tst (
	bcd0,
	bcd1,
	carry,
	LED0,
	LED1,
	sampler_rx
);
input [3:0] bcd0;
input [3:0] bcd1;
input  carry;
input [7:0] LED0;
input [7:0] LED1;
input sampler_rx;

reg [3:0] bcd0_expected;
reg [3:0] bcd1_expected;
reg  carry_expected;
reg [7:0] LED0_expected;
reg [7:0] LED1_expected;

reg [3:0] bcd0_prev;
reg [3:0] bcd1_prev;
reg  carry_prev;
reg [7:0] LED0_prev;
reg [7:0] LED1_prev;

reg [3:0] bcd0_expected_prev;
reg [3:0] bcd1_expected_prev;
reg  carry_expected_prev;
reg [7:0] LED0_expected_prev;
reg [7:0] LED1_expected_prev;

reg [3:0] last_bcd0_exp;
reg [3:0] last_bcd1_exp;
reg  last_carry_exp;
reg [7:0] last_LED0_exp;
reg [7:0] last_LED1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	bcd0_prev = bcd0;
	bcd1_prev = bcd1;
	carry_prev = carry;
	LED0_prev = LED0;
	LED1_prev = LED1;
end

// update expected /o prevs

always @(trigger)
begin
	bcd0_expected_prev = bcd0_expected;
	bcd1_expected_prev = bcd1_expected;
	carry_expected_prev = carry_expected;
	LED0_expected_prev = LED0_expected;
	LED1_expected_prev = LED1_expected;
end


// expected LED0[ 7 ]
initial
begin
	LED0_expected[7] = 1'b0;
end 
// expected LED0[ 6 ]
initial
begin
	LED0_expected[6] = 1'b0;
end 
// expected LED0[ 5 ]
initial
begin
	LED0_expected[5] = 1'b0;
end 
// expected LED0[ 4 ]
initial
begin
	LED0_expected[4] = 1'b0;
end 
// expected LED0[ 3 ]
initial
begin
	LED0_expected[3] = 1'b0;
end 
// expected LED0[ 2 ]
initial
begin
	LED0_expected[2] = 1'b0;
end 
// expected LED0[ 1 ]
initial
begin
	LED0_expected[1] = 1'b0;
end 
// expected LED0[ 0 ]
initial
begin
	LED0_expected[0] = 1'b0;
end 
// expected LED1[ 7 ]
initial
begin
	LED1_expected[7] = 1'b0;
end 
// expected LED1[ 6 ]
initial
begin
	LED1_expected[6] = 1'b0;
end 
// expected LED1[ 5 ]
initial
begin
	LED1_expected[5] = 1'b0;
end 
// expected LED1[ 4 ]
initial
begin
	LED1_expected[4] = 1'b0;
end 
// expected LED1[ 3 ]
initial
begin
	LED1_expected[3] = 1'b0;
end 
// expected LED1[ 2 ]
initial
begin
	LED1_expected[2] = 1'b0;
end 
// expected LED1[ 1 ]
initial
begin
	LED1_expected[1] = 1'b0;
end 
// expected LED1[ 0 ]
initial
begin
	LED1_expected[0] = 1'b0;
end 
// expected bcd0[ 3 ]
initial
begin
	bcd0_expected[3] = 1'bX;
end 
// expected bcd0[ 2 ]
initial
begin
	bcd0_expected[2] = 1'bX;
end 
// expected bcd0[ 1 ]
initial
begin
	bcd0_expected[1] = 1'bX;
end 
// expected bcd0[ 0 ]
initial
begin
	bcd0_expected[0] = 1'bX;
end 
// expected bcd1[ 3 ]
initial
begin
	bcd1_expected[3] = 1'bX;
end 
// expected bcd1[ 2 ]
initial
begin
	bcd1_expected[2] = 1'bX;
end 
// expected bcd1[ 1 ]
initial
begin
	bcd1_expected[1] = 1'bX;
end 
// expected bcd1[ 0 ]
initial
begin
	bcd1_expected[0] = 1'bX;
end 

// expected carry
initial
begin
	carry_expected = 1'bX;
end 
// generate trigger
always @(bcd0_expected or bcd0 or bcd1_expected or bcd1 or carry_expected or carry or LED0_expected or LED0 or LED1_expected or LED1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected bcd0 = %b | expected bcd1 = %b | expected carry = %b | expected LED0 = %b | expected LED1 = %b | ",bcd0_expected_prev,bcd1_expected_prev,carry_expected_prev,LED0_expected_prev,LED1_expected_prev);
	$display("| real bcd0 = %b | real bcd1 = %b | real carry = %b | real LED0 = %b | real LED1 = %b | ",bcd0_prev,bcd1_prev,carry_prev,LED0_prev,LED1_prev);
`endif
	if (
		( bcd0_expected_prev[0] !== 1'bx ) && ( bcd0_prev[0] !== bcd0_expected_prev[0] )
		&& ((bcd0_expected_prev[0] !== last_bcd0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd0_expected_prev);
		$display ("     Real value = %b", bcd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd0_exp[0] = bcd0_expected_prev[0];
	end
	if (
		( bcd0_expected_prev[1] !== 1'bx ) && ( bcd0_prev[1] !== bcd0_expected_prev[1] )
		&& ((bcd0_expected_prev[1] !== last_bcd0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd0_expected_prev);
		$display ("     Real value = %b", bcd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd0_exp[1] = bcd0_expected_prev[1];
	end
	if (
		( bcd0_expected_prev[2] !== 1'bx ) && ( bcd0_prev[2] !== bcd0_expected_prev[2] )
		&& ((bcd0_expected_prev[2] !== last_bcd0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd0_expected_prev);
		$display ("     Real value = %b", bcd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd0_exp[2] = bcd0_expected_prev[2];
	end
	if (
		( bcd0_expected_prev[3] !== 1'bx ) && ( bcd0_prev[3] !== bcd0_expected_prev[3] )
		&& ((bcd0_expected_prev[3] !== last_bcd0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd0_expected_prev);
		$display ("     Real value = %b", bcd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd0_exp[3] = bcd0_expected_prev[3];
	end
	if (
		( bcd1_expected_prev[0] !== 1'bx ) && ( bcd1_prev[0] !== bcd1_expected_prev[0] )
		&& ((bcd1_expected_prev[0] !== last_bcd1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd1_expected_prev);
		$display ("     Real value = %b", bcd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd1_exp[0] = bcd1_expected_prev[0];
	end
	if (
		( bcd1_expected_prev[1] !== 1'bx ) && ( bcd1_prev[1] !== bcd1_expected_prev[1] )
		&& ((bcd1_expected_prev[1] !== last_bcd1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd1_expected_prev);
		$display ("     Real value = %b", bcd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd1_exp[1] = bcd1_expected_prev[1];
	end
	if (
		( bcd1_expected_prev[2] !== 1'bx ) && ( bcd1_prev[2] !== bcd1_expected_prev[2] )
		&& ((bcd1_expected_prev[2] !== last_bcd1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd1_expected_prev);
		$display ("     Real value = %b", bcd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd1_exp[2] = bcd1_expected_prev[2];
	end
	if (
		( bcd1_expected_prev[3] !== 1'bx ) && ( bcd1_prev[3] !== bcd1_expected_prev[3] )
		&& ((bcd1_expected_prev[3] !== last_bcd1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd1_expected_prev);
		$display ("     Real value = %b", bcd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd1_exp[3] = bcd1_expected_prev[3];
	end
	if (
		( carry_expected_prev !== 1'bx ) && ( carry_prev !== carry_expected_prev )
		&& ((carry_expected_prev !== last_carry_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carry :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carry_expected_prev);
		$display ("     Real value = %b", carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_carry_exp = carry_expected_prev;
	end
	if (
		( LED0_expected_prev[0] !== 1'bx ) && ( LED0_prev[0] !== LED0_expected_prev[0] )
		&& ((LED0_expected_prev[0] !== last_LED0_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED0_expected_prev);
		$display ("     Real value = %b", LED0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED0_exp[0] = LED0_expected_prev[0];
	end
	if (
		( LED0_expected_prev[1] !== 1'bx ) && ( LED0_prev[1] !== LED0_expected_prev[1] )
		&& ((LED0_expected_prev[1] !== last_LED0_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED0_expected_prev);
		$display ("     Real value = %b", LED0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED0_exp[1] = LED0_expected_prev[1];
	end
	if (
		( LED0_expected_prev[2] !== 1'bx ) && ( LED0_prev[2] !== LED0_expected_prev[2] )
		&& ((LED0_expected_prev[2] !== last_LED0_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED0_expected_prev);
		$display ("     Real value = %b", LED0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED0_exp[2] = LED0_expected_prev[2];
	end
	if (
		( LED0_expected_prev[3] !== 1'bx ) && ( LED0_prev[3] !== LED0_expected_prev[3] )
		&& ((LED0_expected_prev[3] !== last_LED0_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED0_expected_prev);
		$display ("     Real value = %b", LED0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED0_exp[3] = LED0_expected_prev[3];
	end
	if (
		( LED0_expected_prev[4] !== 1'bx ) && ( LED0_prev[4] !== LED0_expected_prev[4] )
		&& ((LED0_expected_prev[4] !== last_LED0_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED0_expected_prev);
		$display ("     Real value = %b", LED0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED0_exp[4] = LED0_expected_prev[4];
	end
	if (
		( LED0_expected_prev[5] !== 1'bx ) && ( LED0_prev[5] !== LED0_expected_prev[5] )
		&& ((LED0_expected_prev[5] !== last_LED0_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED0_expected_prev);
		$display ("     Real value = %b", LED0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED0_exp[5] = LED0_expected_prev[5];
	end
	if (
		( LED0_expected_prev[6] !== 1'bx ) && ( LED0_prev[6] !== LED0_expected_prev[6] )
		&& ((LED0_expected_prev[6] !== last_LED0_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED0_expected_prev);
		$display ("     Real value = %b", LED0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED0_exp[6] = LED0_expected_prev[6];
	end
	if (
		( LED0_expected_prev[7] !== 1'bx ) && ( LED0_prev[7] !== LED0_expected_prev[7] )
		&& ((LED0_expected_prev[7] !== last_LED0_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED0_expected_prev);
		$display ("     Real value = %b", LED0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED0_exp[7] = LED0_expected_prev[7];
	end
	if (
		( LED1_expected_prev[0] !== 1'bx ) && ( LED1_prev[0] !== LED1_expected_prev[0] )
		&& ((LED1_expected_prev[0] !== last_LED1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED1_expected_prev);
		$display ("     Real value = %b", LED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LED1_exp[0] = LED1_expected_prev[0];
	end
	if (
		( LED1_expected_prev[1] !== 1'bx ) && ( LED1_prev[1] !== LED1_expected_prev[1] )
		&& ((LED1_expected_prev[1] !== last_LED1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED1_expected_prev);
		$display ("     Real value = %b", LED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LED1_exp[1] = LED1_expected_prev[1];
	end
	if (
		( LED1_expected_prev[2] !== 1'bx ) && ( LED1_prev[2] !== LED1_expected_prev[2] )
		&& ((LED1_expected_prev[2] !== last_LED1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED1_expected_prev);
		$display ("     Real value = %b", LED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LED1_exp[2] = LED1_expected_prev[2];
	end
	if (
		( LED1_expected_prev[3] !== 1'bx ) && ( LED1_prev[3] !== LED1_expected_prev[3] )
		&& ((LED1_expected_prev[3] !== last_LED1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED1_expected_prev);
		$display ("     Real value = %b", LED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LED1_exp[3] = LED1_expected_prev[3];
	end
	if (
		( LED1_expected_prev[4] !== 1'bx ) && ( LED1_prev[4] !== LED1_expected_prev[4] )
		&& ((LED1_expected_prev[4] !== last_LED1_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED1_expected_prev);
		$display ("     Real value = %b", LED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LED1_exp[4] = LED1_expected_prev[4];
	end
	if (
		( LED1_expected_prev[5] !== 1'bx ) && ( LED1_prev[5] !== LED1_expected_prev[5] )
		&& ((LED1_expected_prev[5] !== last_LED1_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED1_expected_prev);
		$display ("     Real value = %b", LED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LED1_exp[5] = LED1_expected_prev[5];
	end
	if (
		( LED1_expected_prev[6] !== 1'bx ) && ( LED1_prev[6] !== LED1_expected_prev[6] )
		&& ((LED1_expected_prev[6] !== last_LED1_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED1_expected_prev);
		$display ("     Real value = %b", LED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LED1_exp[6] = LED1_expected_prev[6];
	end
	if (
		( LED1_expected_prev[7] !== 1'bx ) && ( LED1_prev[7] !== LED1_expected_prev[7] )
		&& ((LED1_expected_prev[7] !== last_LED1_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED1_expected_prev);
		$display ("     Real value = %b", LED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LED1_exp[7] = LED1_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cw3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg bt3;
reg sw0;
reg sw1;
// wires                                               
wire [3:0] bcd0;
wire [3:0] bcd1;
wire carry;
wire [7:0] LED0;
wire [7:0] LED1;

wire sampler;                             

// assign statements (if any)                          
cw3 i1 (
// port map - connection between master ports and signals/registers   
	.bcd0(bcd0),
	.bcd1(bcd1),
	.bt3(bt3),
	.carry(carry),
	.LED0(LED0),
	.LED1(LED1),
	.sw0(sw0),
	.sw1(sw1)
);

// bt3
always
begin
	bt3 = 1'b0;
	bt3 = #100000 1'b1;
	#100000;
end 

// sw0
initial
begin
	sw0 = 1'b1;
	# 19900000;
	repeat(2)
	begin
		sw0 = 1'b0;
		sw0 = #19900000 1'b1;
		# 19900000;
	end
	sw0 = 1'b0;
end 

// sw1
initial
begin
	sw1 = 1'b1;
	sw1 = #30000 1'b0;
end 

cw3_vlg_sample_tst tb_sample (
	.bt3(bt3),
	.sw0(sw0),
	.sw1(sw1),
	.sampler_tx(sampler)
);

cw3_vlg_check_tst tb_out(
	.bcd0(bcd0),
	.bcd1(bcd1),
	.carry(carry),
	.LED0(LED0),
	.LED1(LED1),
	.sampler_rx(sampler)
);
endmodule

